#!/usr/bin/env ruby
require 'gli'

begin # XXX: Remove this begin/rescue before distributing your app

  require 'draw'
  require 'rainbow/ext/string'
  require 'highline/import'
  require 'pstore'
  require 'cucumber'
  require 'terminal-table'

rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/draw` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/draw now"
  exit 64
end

include GLI::App

program_desc 'This app lets you build a list of guests and run a gift draw from this list'

version Draw::VERSION

subcommand_option_handling :normal
arguments :strict

# Fill this array with ["Name", "Joint"] separated items
# In case seed file is not available
GUESTS = [["Mr Brault", "Mrs Brault"]]

desc 'Initialize the guest and gifts lists'
command :init do |c|
  c.action do |global_options,options,args|
    guests = GUESTS
    if GuestsFactory.add(guests) == true
      msg = "Successfully initialized draw"
    end
    guests = GuestsFactory.get()
    print_guests(guests, msg)
  end
end

desc 'Clears the gift draw'
command :clear do |c|
  c.action do |global_options,options,args|
    begin
      gifts = []
      if GiftsFactory.clear() == true
        msg = "Successfully deleted draw list of gifts" if gifts.length == 0
      end
      gifts = GiftsFactory.get()
      print_gifts(gifts, msg)
    rescue Exception => e
      puts "draw::clear \t ERROR:\t #{e.message}"
    end
  end
end

desc 'Display gifts from/to list (can be filtered by name)'
arg_name 'name'
command :list do |c|
  c.action do |global_options,options,args|
    begin
      keyword = args[0] unless args.nil?
      gifts = []
      @store.transaction do
        gifts = @store[:gifts] || []
      end

      gifts = keyword.nil? ? gifts : gifts.select {|g| g.from.downcase.include? keyword.downcase }
      if gifts.nil? || gifts.length == 0
        if keyword
          puts "No gift match the query: " + keyword
        else
          puts "The list of gifts is empty ..."
        end
      end
      print_gifts(gifts)
    rescue Exception => e
      puts "draw::list \t ERROR:\t #{e.message}"
    end
  end
end

desc 'Run the draw and display gifts from/to list'
command :run do |c|
  c.action do |global_options,options,args|
    begin
      # Before run the draw we must reset the previous one
      GiftsFactory.clear()
      msg = DrawFactory.run() == true ? "Success" : "Failed"
      gifts = GiftsFactory.get()
      print_gifts(gifts, msg)
    rescue Exception => e
      puts "draw::run \t ERROR:\t #{e.message}"
    end
  end
end

desc 'Guests namespace'
command :guests do |c|

  c.desc 'Add a new guest to the list'
  c.command :add do |a|
    a.desc 'Guest Name'
    a.flag [:n, :name], required: true
    a.desc 'Guest Spouse/Friend Name'
    a.flag [:j, :joint]

    a.action do |global_options,options,args|
      begin
        new_guests = [[options[:name], options[:joint]]]
        if GuestsFactory.add(new_guests) == true
          msg = "Successfully added guest #{options[:name]}"
        end
        guests = GuestsFactory.get()
        print_guests(guests, msg)
      rescue Exception => e
        puts "draw::guests::add \t ERROR:\t #{e.message}"
      end
    end
  end

  c.desc 'Delete all guests in the list'
  c.command :clear do |a|
    a.action do |global_options,options,args|
      begin
        if GuestsFactory.clear() == true
          guests = GuestsFactory.get()
          msg = "Successfully deleted all guests" if guests.length == 0
        end
        # if there are not more guests, we should also delete the gifts list
        GiftsFactory.clear()
        print_guests(guests, msg)
      rescue Exception => e
        puts "draw::guests::clear \t ERROR:\t #{e.message}"
      end
    end
  end

  c.desc 'Lists all guests'
  c.arg_name 'name'
  c.command :list do |a|
    a.action do |global_options,options,args|
      begin
        keyword = args[0] unless args.nil?
        guests = GuestsFactory.get(keyword)
        if guests.nil? || guests.length == 0
          if keyword
            msg = "No guest match the query: " + keyword
          else
            msg = "The list of guests is empty ..."
          end
        end
        print_guests(guests, msg)
      rescue Exception => e
        puts "draw::guests::list \t ERROR:\t #{e.message}"
      end
    end
  end

  c.desc 'Match all guests'
  c.command :match do |a|
    a.action do |global_options,options,args|
      begin
        new_guests = []
        guests = GuestsFactory.get()
        guests.each do |guest|
          new_guests << [guest.joint, guest.name] unless guest.joint.nil?
        end
        if GuestsFactory.add(new_guests) == true
          msg = "Successfully matched all guests"
        end
        guests = GuestsFactory.get()
        print_guests(guests, msg)
      rescue Exception => e
        puts "draw::guests::match \t ERROR:\t #{e.message}"
      end
    end
  end

  c.desc 'Seed guests list'
  c.command :seed do |a|
    a.action do |global_options,options,args|
      begin
        new_guests = GuestsFactory.seed()
        if GuestsFactory.add(new_guests) == true
          msg = "Successfully seeded guests"
        end
        guests = GuestsFactory.get()
        print_guests(guests, msg)
      rescue Exception => e
        puts "draw::guests::seed \t ERROR:\t #{e.message}"
      end
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  @store = PStore.new %(#{ENV['HOME']}/draw.pstore)
  @store.transaction do
    @store[:guests] ||= []
    @store[:gifts] ||= []
  end
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

private

# def add_guests new_guests
#   begin
#     guests = []
#     @store.transaction do
#       guests = @store[:guests] || []
#     end
#     new_guests.each do |new_guest|
#       guest = Guest.new(new_guest[0], new_guest[1])
#       add = (guests.length > 0 && guests.select {|g| g.name.downcase.include? guest.name.downcase }.length > 0) ? false : true
#       if add
#         @store.transaction do
#           @store[:guests] << guest
#           if @store[:guests].include? guest
#             puts "Successfully added " + guest.name + " to the list of guests"
#             guests << guest
#           end
#         end
#       else
#         name = new_guest[0].color :red
#         puts "Guest '" + name + "' is already in the list"
#       end
#     end
#     return guests
#   rescue Exception => e
#     puts "add_guests \t ERROR:\t #{e.message}"
#   end
# end

def print_guests(guests = nil, msg = nil)
  puts msg if msg
  table = Terminal::Table.new do |t|
    t.style = { width: 80, border_x: "=", border_i: "+"}
    t.title = "Draw list of guests"
    t.headings = ["Index", "Guest", "Spouse/Friend"]

    index = 1
    guests.each_with_index do |guest, index|
      index += 1
      t << [index.to_s, guest.name, guest.joint]
    end
  end
  table.align_column 0, :center
  puts table
end

def print_gifts(gifts = nil, msg = nil)
  puts msg if msg
  table = Terminal::Table.new do |t|
    t.style = { width: 80, border_x: "=", border_i: "+"}
    t.title = "Draw list of gifts"
    t.headings = ["Index", "From", "To"]

    index = 1
    gifts.each_with_index do |gift, index|
      index += 1
      t << [index.to_s, gift.from, gift.to]
    end
  end
  table.align_column 0, :center
  puts table
end

exit run(ARGV)
